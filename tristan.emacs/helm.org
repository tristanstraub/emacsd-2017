** helm

#+begin_src emacs-lisp
    (ensure-package 'helm)
    (ensure-package 'helm-cmd-t)
    (ensure-package 'helm-ls-git)
    (ensure-package 'helm-git-grep)
    (ensure-package 'helm-projectile)
    (helm-projectile-on)

    (require 'helm-config)

    (defvar ts/helm-cmd-t nil)


    (defcustom ts/helm-sources '(helm-source-ls-git
                                 ts/helm-cmd-t
                                 helm-source-buffers-list

                                 ;;helm-source-git-grep
                                 ;;helm-source-ido-virtual-buffers
                                 )

      "Your preferred sources to navigate"
      :type '(repeat (choice symbol))
      :group 'helm-files)

    (defun ts/helm-cmd-t ()
      "Preconfigured `helm' for opening direct-web files."
      (interactive)
      (setq ts/helm-cmd-t (helm-cmd-t-get-create-source (helm-cmd-t-root-data)))
      (let ((helm-ff-transformer-show-only-basename nil))
        (helm-other-buffer ts/helm-sources "*helm*")))



#+end_src

#+RESULTS:
: ts/helm-cmd-t

*** custom helm-projectile-grep

#+BEGIN_SRC emacs-lisp
  (defun helm-projectile-grep-or-ack (&optional dir use-ack-p ack-ignored-pattern ack-executable)
    "Perform helm-grep at project root.
  DIR directory where to search
  USE-ACK-P indicates whether to use ack or not.
  ACK-IGNORED-PATTERN is a file regex to exclude from searching.
  ACK-EXECUTABLE is the actual ack binary name.
  It is usually \"ack\" or \"ack-grep\".
  If it is nil, or ack/ack-grep not found then use default grep command."
    (let* ((default-directory (or dir (projectile-project-root)))
           (helm-ff-default-directory default-directory)
           (follow (and helm-follow-mode-persistent
                        (assoc-default 'follow helm-source-grep)))
           (helm-grep-in-recurse t)
           (helm-grep-ignored-files (-union (projectile-ignored-files-rel)  grep-find-ignored-files))
           (helm-grep-ignored-directories (-union (projectile-ignored-directories-rel) grep-find-ignored-directories))
           (helm-grep-default-command (if use-ack-p
                                          (concat ack-executable " -H --no-group --no-color " ack-ignored-pattern " %p %f")
                                        (if (and projectile-use-git-grep (eq (projectile-project-vcs) 'git))
                                            "git --no-pager grep --no-color -n -e %p -- %f"
                                          "grep -a -R %e -n%cH -e %p %f .")))
           (helm-grep-default-recurse-command helm-grep-default-command)
           (helm-source-grep
            (helm-build-async-source
                (capitalize (helm-grep-command t))
              :header-name (lambda (name)
                             (let ((name (if use-ack-p
                                             "Helm Projectile Ack"
                                           "Helm Projectile Grep")))
                               (concat name " " "(C-c ? Help)")))
              :candidates-process 'helm-grep-collect-candidates
              :filter-one-by-one 'helm-grep-filter-one-by-one
              :candidate-number-limit 9999
              :nohighlight t
              ;; We need to specify keymap here and as :keymap arg [1]
              ;; to make it available in further resuming.
              :keymap helm-grep-map
              :history 'helm-grep-history
              :action (helm-make-actions
                       "Find file" 'helm-grep-action
                       "Find file other frame" 'helm-grep-other-frame
                       (lambda () (and (locate-library "elscreen")
                                       "Find file in Elscreen"))
                       'helm-grep-jump-elscreen
                       "Save results in grep buffer" 'helm-grep-save-results
                       "Find file other window" 'helm-grep-other-window)
              :persistent-action 'helm-grep-persistent-action
              :persistent-help "Jump to line (`C-u' Record in mark ring)"
              :requires-pattern 2)))
      (helm
       :sources 'helm-source-grep
       :input (if (region-active-p)
                  (buffer-substring-no-properties (region-beginning) (region-end))
                (thing-at-point 'symbol))
       :buffer (format "*helm %s*" (if use-ack-p
                                       "ack"
                                     "grep"))
       :default-directory default-directory
       :keymap helm-grep-map
       :history 'helm-grep-history
       :truncate-lines t)))

  (global-set-key (kbd "M-t") 'ts/helm-cmd-t)
  (global-set-key (kbd "M-g") 'helm-projectile-grep)
#+END_SRC

#+RESULTS:
: ts/helm-cmd-t
